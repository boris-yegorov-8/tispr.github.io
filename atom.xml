<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tispr Engineering]]></title>
  <link href="http://engineering.tispr.com/atom.xml" rel="self"/>
  <link href="http://engineering.tispr.com/"/>
  <updated>2015-08-21T19:21:44+00:00</updated>
  <id>http://engineering.tispr.com/</id>
  <author>
    <name><![CDATA[BuddyHopp, Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Running Docker in a GoCD Agent That Runs in a Docker]]></title>
    <link href="http://engineering.tispr.com/blog/2015/08/19/running-docker-in-gocd-agent-that-runs-in-docker/"/>
    <updated>2015-08-19T02:08:27+00:00</updated>
    <id>http://engineering.tispr.com/blog/2015/08/19/running-docker-in-gocd-agent-that-runs-in-docker</id>
    <content type="html"><![CDATA[<p>Setting up Continuous Delivery may be challenging. However, it is definitely worth the time and resource investment,
if you want to release often, maintain a high quality of released products and have full control over the complete process.
<a href="http://www.go.cd/">GoCD</a> is built on a pipelines concept described in <a href="http://martinfowler.com/books/continuousDelivery.html">Continuous Delivery book</a>.
<a href="https://www.docker.com/">Docker</a> greatly fits into the concept, because it solves the problem of packaging applications with all required dependencies and configurations into a standardized container unit.
A common build pipeline will use a Dockerfile as an input, create an image and publish it to a Docker registry.
A common deploy pipeline will use a Docker registry image as an input and deploy it to a proper environment when it is updated.</p>

<p>GoCD in its basic setup is distributed and has a Server and one or more Agents, which are running actual Jobs and Tasks.
The Server can be customized by adding new plugins, or by setting up a backed-up pipeline configuration.
The Agents may have different resources to run different types of jobs, i.e. separate Agents to build java and node.js projects.
Same as for any other software deliverable, packaging GoCD Server and Agents into Docker containers simplifies their deployment and maintainability.
One of the challenges in this setup is running your existing Docker pipelines in an Agent, which is running in a Docker container.</p>

<p>So, in brief, you may find this article interesting, if you:</p>

<ul>
<li>use GoCD;</li>
<li>use Docker;</li>
<li>use GoCD to build Docker images;</li>
<li>run GoCD agents in a Docker.</li>
</ul>


<p>The most important part of this setup is a <a href="https://hub.docker.com/r/jpetazzo/dind/">Docker-in-Docker</a>, which we use as a base image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FROM jpetazzo/dind</span></code></pre></td></tr></table></div></figure>


<p>To run a GoCD agent in a Docker, we need to run several processes in one container. For this let&rsquo;s use <a href="http://docs.docker.com/articles/using_supervisord/">supervisor</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUN apt-get -y install supervisor
</span><span class='line'>ADD supervisord.conf /etc/supervisor/conf.d/supervisord.conf
</span><span class='line'>CMD ["/usr/bin/supervisord"]</span></code></pre></td></tr></table></div></figure>


<p>The configuration file for the supervisor will contain a section per each process, including the supervisor itself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[supervisord]
</span><span class='line'>nodaemon=true
</span><span class='line'>
</span><span class='line'>[program:docker]
</span><span class='line'>priority=10
</span><span class='line'>command=wrapdocker
</span><span class='line'>
</span><span class='line'>[program:gocdagent]
</span><span class='line'>priority=20
</span><span class='line'>command=/bin/bash -c "/etc/init.d/go-agent start"</span></code></pre></td></tr></table></div></figure>


<p>Some additional tweaks may be required to run your GoCD agent properly. One of them is setting <code>GO_SERVER</code> in your agent configuration. Let&rsquo;s assume that it is available as an environment variable with the same name:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo export GO_SERVER=$GO_SERVER &gt;&gt; /etc/default/go-agent</span></code></pre></td></tr></table></div></figure>


<p>Another update will allow to run <code>sudo docker</code> without an interactive password prompt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo go ALL=NOPASSWD: /usr/bin/docker &gt;&gt; /etc/sudoers</span></code></pre></td></tr></table></div></figure>


<p>And the complete GoCD command will look like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>command=/bin/bash -c "echo export GO_SERVER=$GO_SERVER &gt;&gt; /etc/default/go-agent && echo go ALL=NOPASSWD: /usr/bin/docker &gt;&gt; /etc/sudoers && /etc/init.d/go-agent start"</span></code></pre></td></tr></table></div></figure>


<p>You can check the complete <a href="https://github.com/tispr/docker-gocd/tree/master/gocd-agent-dind/">Dockerfile</a> and start playing
with existing image by pulling <a href="https://hub.docker.com/r/tispr/gocd-agent-dind/">tispr/gocd-agent-dind</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker pull tispr/gocd-agent-dind</span></code></pre></td></tr></table></div></figure>


<p>Now nothing stops you from setting up a GoCD pipeline to manage dockerized GoCD Server and GoCD Agents.</p>

<h2>References</h2>

<ul>
<li>Docker in Docker: <a href="https://github.com/jpetazzo/dind/">https://github.com/jpetazzo/dind/</a></li>
<li>Go Continuous Delivery: <a href="http://www.go.cd/">http://www.go.cd/</a></li>
<li>Jenkins DIND: <a href="https://github.com/killercentury/docker-jenkins-dind">https://github.com/killercentury/docker-jenkins-dind</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Display Build Number and Version on an iOS App Icon]]></title>
    <link href="http://engineering.tispr.com/blog/2015/08/02/how-to-display-build-number-and-version-on-an-ios-app-icon/"/>
    <updated>2015-08-02T21:30:19+00:00</updated>
    <id>http://engineering.tispr.com/blog/2015/08/02/how-to-display-build-number-and-version-on-an-ios-app-icon</id>
    <content type="html"><![CDATA[<p>How often do you face the situation where your colleagues, QA, business or marketing report issues in test builds, but they forget to mention a build number or application version? And when they ask you about it, you spend a lot of time explaining the build number and application version, and where it can be found? When you have one to two builds per month the issue is not very big, but when you have a lot of different builds per week, it becomes cumbersome.</p>

<p>-For instance at <a href="http://tispr.com">tispr</a> we build on each commit and every week for internal testing, and weekly demo&rsquo;s for business &amp; marketing departments.</p>

<p>Let&rsquo;s solve this issue, by creating a build number and app version with maximum visibility for users!</p>

<p>Our solution: On the application icon.
You must be thinking: A new icon for each new build?! Our answer is yes, why not.</p>

<p>Let&rsquo;s look at the how:</p>

<p><img class="left ({{ root_url }}" src="http://engineering.tispr.com/images/2015-08-02-how-to-stop-explain-where-application-version-can-be-found/app_icon.png" width="100" height="100" title="image" alt="images">
<strong>Develop</strong> - it is type/name of build (if you have a different type of builds, for instance: Develop build, Business build, etc);
<strong>1.0.1</strong> - application version;
<strong>1023</strong> - build number</p>

<p><br/>
<em>Let&rsquo;s code:</em></p>

<p>Add new &ldquo;Run Script&rdquo; in Xcode in &ldquo;Build Phase&rdquo;
<img src="http://engineering.tispr.com/images/2015-08-02-how-to-stop-explain-where-application-version-can-be-found/build_phase_1.png" alt="application icon with overlay" />
<img src="http://engineering.tispr.com/images/2015-08-02-how-to-stop-explain-where-application-version-can-be-found/build_phase_2.png" alt="application icon with overlay" /></p>

<p>Get build number and application version from info plist in script</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version=`/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "${INFOPLIST_FILE}"`
</span><span class='line'>build=`/usr/libexec/PlistBuddy -c "Print CFBundleVersion" "${INFOPLIST_FILE}"`</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s imagine that we have a function with the name &ldquo;addOverlayInfo&rdquo; which has two parameters (name of incoming icon, name of icon that will be generated)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function addOverlayInfo() {
</span><span class='line'>    income_icon_name=$1
</span><span class='line'>    outcome_icon_name=$2</span></code></pre></td></tr></table></div></figure>


<p>The result is something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>addOverlayInfo "iPhone-60@2x.png" "AppIcon60x60@2x.png"
</span><span class='line'>addOverlayInfo "iPhone-60@3x.png" "AppIcon60x60@3x.png"</span></code></pre></td></tr></table></div></figure>


<p>where <code>iPhone-60@2x.png</code>, <code>iPhone-60@3x.png</code> - the names of the current application icons
While the application builds the Xcode, the icons with the names <code>AppIcon60x60@2x.png</code>, <code>AppIcon60x60@3x.png</code> will be generated, if you use Images.xcassets.
So, these names are used as second parameters in our calls.</p>

<p>Let&rsquo;s find the icon path by name of the icon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>income_icon_path=`find ${SRCROOT} -name $income_icon_name`</span></code></pre></td></tr></table></div></figure>


<p>Create a path to save the generated icon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>outcome_icon_path="${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/${outcome_icon_name}"</span></code></pre></td></tr></table></div></figure>


<p>And now the most important moment: Generating icons with an overlay, including the build number and application version.</p>

<p>Following a quick search on the internet we found that we will need these packages(imagemagick and ghostscript). Let&rsquo;s install them:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install imagemagick
</span><span class='line'>brew install ghostscript</span></code></pre></td></tr></table></div></figure>


<p>To find the width of the incoming icon:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>width=`identify -format %w ${income_icon_path}`</span></code></pre></td></tr></table></div></figure>


<p>To generate the new icon with all the important information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>convert -background '#0008' -fill white -gravity center -size ${width}x60 -pointsize 20\
</span><span class='line'>caption:"$TYPE_OF_BUILD $version($build)" ${income_icon_path} +swap -gravity south -composite ${outcome_icon_path}</span></code></pre></td></tr></table></div></figure>


<p><code>$TYPE_OF_BUILD</code> - The name of our build.
To complete the process you might want to consider automating it by making it part of your Continuous Delivery process.</p>

<p><em>Mission completed</em></p>

<p>You can find the full script here: <a href="https://gist.github.com/Pitsko/993d81ac76e8d04ca1bc">Code</a></p>

<p>This article was inspired by these posts: <br/>
<a href="http://habrahabr.ru/post/262667/">http://habrahabr.ru/post/262667/</a> <br/>
<a href="http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon">http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging With Octopress: Editorial Workflow]]></title>
    <link href="http://engineering.tispr.com/blog/2015/07/22/blogging-with-octopress-editorial-workflow/"/>
    <updated>2015-07-22T20:21:06+00:00</updated>
    <id>http://engineering.tispr.com/blog/2015/07/22/blogging-with-octopress-editorial-workflow</id>
    <content type="html"><![CDATA[<p>Octopress is an intuitive and simple blogging platform. The official documentation includes numerous examples and tutorials: <a href="http://octopress.org/docs.">http://octopress.org/docs.</a> The purpose of this article is to give a quick reference to commands which cover some basic workflows.</p>

<p>The setup of Octopress is described here: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> and will not be covered in this article.</p>

<p>With a basic setup of Octopress, GitHub repo will have branches:</p>

<ul>
<li><code>source</code> branch for source code.</li>
<li><code>master</code> branch for generated HTML code.</li>
</ul>


<p>Basic steps (including responsible participants):</p>

<ul>
<li>Create a new blog post with Octopress (content producer)</li>
<li>Submit a pull request to <code>source</code> (content producer)</li>
<li>Review and merge pull request (content reviewer)</li>
<li>Generate HTML code from merged code and deploy to <code>master</code> with Octopress (automated by Continuous Integration server)</li>
</ul>


<h2>Create a new blog post</h2>

<p>Now let&rsquo;s dig into the details of Octopress and start by creating a blog post stub including title, date, categories and others:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake new_post["Blogging with Octopress"]
</span><span class='line'>mkdir -p source/_posts
</span><span class='line'>Creating new post: source/_posts/2015-07-22-blogging-with-octopress.markdown</span></code></pre></td></tr></table></div></figure>


<p>The next step is to edit generated markdown file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vim source/_posts/2015-07-22-blogging-with-octopress.markdown</span></code></pre></td></tr></table></div></figure>


<p>More details on editing a post can be found here: <a href="http://octopress.org/docs/blogging/.">http://octopress.org/docs/blogging/.</a></p>

<p>After any update you can check what your freshly-baked post looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake preview</span></code></pre></td></tr></table></div></figure>


<p>As soon as a new post is ready, you just commit your code and submit a pull request:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add source/_posts/2015-07-22-blogging-with-octopress.markdown
</span><span class='line'>$ git commit -m "New post: Blogging with Octopress"</span></code></pre></td></tr></table></div></figure>


<h2>Publish updated site</h2>

<p>Let&rsquo;s assume you have a Continuous Integration server, which generates a new HTML code for your blog on update of the <code>source</code> branch and deploys it to the <code>master</code> afterwards.</p>

<p>As soon as the source code is checked out by CI, you need to setup GitHub as a deployment option, generate the HTML code and deploy:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages["https://github.com/tispr/tispr.github.io"]
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>Issues</h3>

<h4>Unable to deploy updated content to master</h4>

<p>You may experience issues with doing <code>rake deploy</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Pushing generated _deploy website
</span><span class='line'>To https://github.com/tispr/tispr.github.io
</span><span class='line'> ! [rejected]        master -&gt; master (non-fast-forward)
</span><span class='line'>error: failed to push some refs to 'https://github.com/tispr/tispr.github.io'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</span><span class='line'>Deploy does not work.</span></code></pre></td></tr></table></div></figure>


<p>This may be related to the fact that the root directory of the source code and <code>_deploy</code> directory for generated HTML have different git repository branches set to <code>source</code> and <code>master</code> respectively. Thanks to StackOverflow a  workaround was found:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd _deploy
</span><span class='line'>git pull origin master
</span><span class='line'>cd ..
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>However, if you know a cleaner way to resolve this issue, please share in the comments.</p>

<p>Happy blogging!</p>
]]></content>
  </entry>
  
</feed>
